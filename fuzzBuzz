// Aim: Aim is to write SOILD priciple compatible fuxxBuzz implementation.
// Note: I will be skipping the validation of the input.

// Simple FuzzBuzz Program

function fizzBuzz(num)  {
  output = [];
  for(let i = 1; i <= num; i++) {
    if(i % 5 === 0 && i % 3 === 0) {
      output.push('fizzbuzz');
    } else if (i % 3 === 0) {
      output.push('fizz');
    } else if (i % 5 === 0) {
      output.push('buzz');
    } else {
      output.push(i);
    }
  }
  return output.toString();
} 

console.log(fizzBuzz(20));

class TextType {
  constructor(type) {
    this.type = type;
  }
  getMatchedString() {
    return this.type;
  }
  matches(n) {
    return n === n;
  }
}

class FuzzType extends TextType {
  constructor() {
    super('fuzz');
  }
  matches(n) {
    return n % 3 ===0;
  }
}

class BuzzType extends TextType {
  constructor() {
    super('buzz');
  }
  matches(n) {
    return n % 5 ===0;
  }
}

class FuzzBuzzType extends TextType {
  constructor() {
    super('fuzzBuzz');
  }
  matches(n) {
    return n % 3 === 0 && n % 5 === 0;
  }
}

class FuzzBuzz {
  constructor() {
    this.rules = [];
  }

  addRules(rule) {
    this.rules.push(rule);
  }

  generate(num) {
    const output = [];
    for(let i = 1; i <=num; i++) {
      output.push(this.getReplacement(i));
    }
    return output.toString();
  }

  getReplacement(num) {
    for(const rule of this.rules) {
      if(rule.matches(num)) {
        return rule.getMatchedString();
      }
    }
    return num;
  }
}

const fuzzBuzzGenerator = new FuzzBuzz();
fuzzBuzzGenerator.addRules(new FuzzBuzzType());
fuzzBuzzGenerator.addRules(new FuzzType());
fuzzBuzzGenerator.addRules(new BuzzType());

console.log(fuzzBuzzGenerator.generate(20));
